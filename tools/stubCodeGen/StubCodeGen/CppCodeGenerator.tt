<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="StubCodeGen" #>
// NOTE: This file was generated by a tool.
#include "GeneratedTrampolines.g.h"
#include <Hooks\ITrampolineClient.g.h>
#include <easyhook.h>

namespace ReSoel {
    namespace Hooks {
<# foreach (var method in Definitions) { #>
        <#= method.ReturnType #> GeneratedTrampolines::<#= method.Name #>Hook(<#= String.Join(", ", method.Args) #>) {
            if (GetDebugMode()) m_debugOut << "[<#= method.Name #>]::()" << std::endl;
            if (m_client) m_client-><#= method.Name #>Pre(<#= GeneratorHelpers.GetPassThroughArgumentString(method, false) #>);
            auto result = ::<#= method.Name #>(<#= GeneratorHelpers.GetPassThroughArgumentString(method, false) #>);
            if (m_client) m_client-><#= method.Name #>Post(<#= GeneratorHelpers.GetPassThroughArgumentString(method, true) #>);
            return result;
        }

        <#= method.ReturnType #> WINAPI GeneratedTrampolines::<#= method.Name #>HookStatic(<#= String.Join(", ", method.Args) #>) {
            return GetInstance().<#= method.Name #>Hook(<#= GeneratorHelpers.GetPassThroughArgumentString(method, false) #>);
        } 

<# } #>

        GeneratedTrampolines::HookTable GeneratedTrampolines::BuildHookTable() const {
            static const char* kernel32Dll = "kernel32.dll";
            return HookTable{
<# foreach (var method in Definitions) { #>
                std::make_tuple(kernel32Dll, "<#= method.Name #>", (void*)<#= method.Name #>HookStatic, HOOK_TRACE_INFO{}),
<# } #>
            };
        }
    }
}